name: "Build Container"
description: "Build container"

inputs:
  region:
    description: "AWS Region"
    required: true
  role:
    description: "Role to assume (ECR)"
    required: true
  tag:
    description: "Image tag in ECR"
    required: true
  preprod:
    description: "Install dev dependencies"
    required: true
  load:
    description: "Load"
    required: true

runs:
  using: composite
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1.6.0
      with:
        install: true

    - name: Declare Cache Registry
      id: cache-docker-images-code
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ env.role }}
        aws-region: ${{ env.region }}

    - name: Read secrets from AWS Secrets Manager into environment variables
      uses: abhilash1in/aws-secrets-manager-action@v2.0.0
      with:
        parse-json: true
        secrets: ${{ env.ASM }}

    - run: echo $PRODUCTION_OCTANE_JENKINS_ARTIFACTORY_AUTH_ARTIFACTORYEMAIL
      shell: bash

    - name: Build Docker Image
      uses: docker/build-push-action@v2.10.0
      env:
        ARTIFACTORY_PASS: ${{ env.PRODUCTION_OCTANE_JENKINS_ARTIFACTORY_AUTH_ARTIFACTORYNPMAUTH }}
        ARTIFACTORY_USER: ${{ env.PRODUCTION_OCTANE_JENKINS_ARTIFACTORY_AUTH_ARTIFACTORYEMAIL }}
        PIP_INDEX_URL: ${{ env.PRODUCTION_OCTANE_JENKINS_ARTIFACTORY_AUTH_ARTIFACTORYPIPINDEXURL }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPO }}
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        file: docker/Dockerfile
        push: false
        tags: ${{ inputs.tag }}
        no-cache: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
        load: ${{ inputs.load }}
        build-args: PREPROD=${{ inputs.preprod }}
